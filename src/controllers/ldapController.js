import { LDAP_CONFIG, createLdapClient, searchLdap } from '../config/ldapConfig.js';
import userModel from '../models/userModel.js';

// Busca UM usu√°rio pelo username
export const getLdapUser = async (username) => {
    return new Promise((resolve, reject) => {
        const client = createLdapClient();

        client.bind(LDAP_CONFIG.bindDN, LDAP_CONFIG.bindCredentials, async (err) => {
            if (err) {
                console.error("‚ùå Erro ao conectar ao LDAP:", err);
                reject(new Error("Erro ao conectar ao servidor LDAP"));
                return;
            }

            try {
                const users = await searchLdap(client);
                console.log(`‚úÖ ${users.length} usu√°rios encontrados.`);

                // Filtrar pelo username
                const foundUser = users.find(user => user.sAMAccountName === username);

                if (!foundUser) {
                    console.error(`‚ùå Usu√°rio ${username} n√£o encontrado no AD.`);
                    resolve(null);
                } else {
                    console.log("‚úÖ Usu√°rio encontrado:", foundUser);
                    resolve(foundUser);
                }
            } catch (error) {
                console.error("‚ùå Erro na busca LDAP:", error);
                reject(new Error("Erro ao buscar usu√°rios no LDAP"));
            } finally {
                client.unbind();
            }
        });
    });
};

// Controlador para registrar usu√°rio LDAP no MongoDB
export const registerLdapUser = async (req, res) => {
    try {
        console.log("üì© Recebendo requisi√ß√£o para registrar usu√°rio LDAP...");

        if (!req.body || !req.body.username) {
            console.error("‚ùå Requisi√ß√£o inv√°lida: falta 'username'.");
            return res.status(400).json({ error: "Nome de usu√°rio √© obrigat√≥rio" });
        }

        const { username } = req.body;
        console.log(`üîç Buscando usu√°rio no LDAP: ${username}`);

        // Buscar usu√°rio no LDAP
        const ldapUser = await getLdapUser(username);

        if (!ldapUser) {
            console.error(`‚ùå Usu√°rio ${username} n√£o encontrado no AD.`);
            return res.status(404).json({ error: "Usu√°rio n√£o encontrado no AD" });
        }

        console.log("‚úÖ Usu√°rio encontrado no AD:", ldapUser);

        // Verificar se j√° existe no banco
        let user = await userModel.findOne({ username: ldapUser.sAMAccountName });

        // Determinar fun√ß√£o do usu√°rio
        const memberOf = ldapUser.memberOf || [];
        const role = Array.isArray(memberOf) && memberOf.some(grupo => grupo.includes("STI")) ? "T√©cnico" : "Servidor";

        if (!user) {
            console.log(`üÜï Criando novo usu√°rio: ${ldapUser.sAMAccountName}`);

            // Criar usu√°rio no MongoDB
            user = new userModel({
                username: ldapUser.sAMAccountName,
                name: ldapUser.cn,
                email: ldapUser.mail,
                role: role,
                dn: ldapUser.distinguishedName,
                memberOf: memberOf,
            });

            await user.save();
        } else {
            console.log(`üîÑ Atualizando usu√°rio existente: ${ldapUser.sAMAccountName}`);

            // Atualizar usu√°rio caso os dados tenham mudado
            await userModel.updateOne(
                { _id: user._id },
                {
                    name: ldapUser.cn,
                    email: ldapUser.mail,
                    role: role,
                    dn: ldapUser.distinguishedName,
                    memberOf: memberOf,
                }
            );
        }

        console.log("‚úÖ Usu√°rio LDAP cadastrado/atualizado com sucesso!");
        return res.json({ message: "Usu√°rio LDAP cadastrado com sucesso", user });
    } catch (error) {
        console.error("‚ùå Erro ao processar requisi√ß√£o:", error);

        if (res && typeof res.status === "function") {
            return res.status(500).json({ error: "Erro interno ao buscar ou salvar usu√°rio", message: error.message });
        } else {
            console.error("‚ùå ERRO CR√çTICO: 'res' est√° indefinido!");
        }
    }
};

// Controlador para buscar todos os usu√°rios do AD
export const getAllLdapUsers = async (req, res) => {
    try {
        console.log("üîç Buscando todos os usu√°rios no LDAP...");
        const client = createLdapClient();

        client.bind(LDAP_CONFIG.bindDN, LDAP_CONFIG.bindCredentials, async (err) => {
            if (err) {
                console.error("‚ùå Erro ao conectar ao LDAP:", err);
                return res.status(500).json({ error: "Erro ao conectar ao servidor LDAP" });
            }

            try {
                const users = await searchLdap(client);
                console.log(`‚úÖ ${users.length} usu√°rios encontrados no AD.`);
                res.json(users);
            } catch (error) {
                console.error("‚ùå Erro na busca LDAP:", error);
                res.status(500).json({ error: "Erro ao buscar usu√°rios no LDAP" });
            } finally {
                client.unbind();
            }
        });
    } catch (error) {
        console.error("‚ùå Erro ao processar requisi√ß√£o:", error);
        res.status(500).json({ error: "Erro interno ao buscar usu√°rios", message: error.message });
    }
};